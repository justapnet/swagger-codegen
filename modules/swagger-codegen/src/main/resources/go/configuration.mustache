{{>partial_header}}
package {{packageName}}

import (
    "crypto/rsa"
    "crypto/x509"
    "encoding/pem"
    "errors"
    "fmt"
    "io/ioutil"
    "net/http"
    "strings"
)

// contextKeys are used to identify the type of value in the context.
// Since these are string, it is possible to get a short description of the
// context key for logging and debugging using key.String().

type contextKey string

func (c contextKey) String() string {
	return "auth " + string(c)
}

var (
	// ContextOAuth2 takes a oauth2.TokenSource as authentication for the request.
	ContextOAuth2 = contextKey("token")

	// ContextBasicAuth takes BasicAuth as authentication for the request.
	ContextBasicAuth = contextKey("basic")

	// ContextAccessToken takes a string oauth2 access token as authentication for the request.
	ContextAccessToken = contextKey("accesstoken")

	// ContextAPIKey takes an APIKey as authentication for the request
	ContextAPIKey = contextKey("apikey")
)

// BasicAuth provides basic http authentication to a request passed via context using ContextBasicAuth
type BasicAuth struct {
	UserName string `json:"userName,omitempty"`
	Password string `json:"password,omitempty"`
}

// APIKey provides API key based authentication to a request passed via context using ContextAPIKey
type APIKey struct {
	Key    string
	Prefix string
}

type Configuration struct {
	BasePath      string            `json:"basePath,omitempty"`
	Host          string            `json:"host,omitempty"`
	Scheme        string            `json:"scheme,omitempty"`
	DefaultHeader map[string]string `json:"defaultHeader,omitempty"`
	UserAgent     string            `json:"userAgent,omitempty"`
	HTTPClient    *http.Client
    MerchantRsaPrivateKey *rsa.PrivateKey
}

func NewConfiguration() *Configuration {
    var host = "{{{basePath}}}"
    host = strings.TrimRight(host, "/")
	cfg := &Configuration{
		BasePath:      host,
		DefaultHeader: make(map[string]string),
		UserAgent:     "{{#httpUserAgent}}{{{.}}}{{/httpUserAgent}}{{^httpUserAgent}}Swagger-Codegen/{{{packageVersion}}}/go{{/httpUserAgent}}",
	}
	return cfg
}

func (c *Configuration) AddDefaultHeader(key string, value string) {
	c.DefaultHeader[key] = value
}

func (c *Configuration) SetMerchantRsaPrivateKeyByPath(path string) error {
    raw, err := ioutil.ReadFile(path)
    if err != nil {
    return err
    }

    return c.SetMerchantRsaPrivateKeyByContent(raw)
}

func (c *Configuration) SetMerchantRsaPrivateKeyByContent(content []byte) error {
    block, _ := pem.Decode(content)
    if block == nil {
        return errors.New(fmt.Sprintf("pem.Decode(%s),error", content))
    }
    var pk *rsa.PrivateKey
    var ok bool
    pk8, err := x509.ParsePKCS8PrivateKey(block.Bytes)
    if err != nil {
     pk, err = x509.ParsePKCS1PrivateKey(block.Bytes)
        if err != nil {
            return err
        }
    }
    if pk == nil {
        pk, ok = pk8.(*rsa.PrivateKey)
        if !ok {
            return errors.New("parse PKCS8 key error")
        }
    }
    c.MerchantRsaPrivateKey = pk
    return nil
}